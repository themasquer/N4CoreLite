// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using DataAccess.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DataAccess.Contexts
{
    public partial class Db
    {
        private IDbProcedures _procedures;

        public virtual IDbProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DbProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDbProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class DbProcedures : IDbProcedures
    {
        private readonly Db _context;

        public DbProcedures(Db context)
        {
            _context = context;
        }

        public virtual async Task<int> NotOrtalamaHesaplaAsync(int? ogrenciId, OutputParameter<decimal?> notOrtalama, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternotOrtalama = new SqlParameter
            {
                ParameterName = "notOrtalama",
                Precision = 5,
                Scale = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = notOrtalama?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ogrenciId",
                    Value = ogrenciId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameternotOrtalama,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[NotOrtalamaHesapla] @ogrenciId = @ogrenciId, @notOrtalama = @notOrtalama OUTPUT", sqlParameters, cancellationToken);

            notOrtalama.SetValue(parameternotOrtalama.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
