@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@{
    var viewEnumerable = GetEnumerableTypeExpression(Model.ViewDataTypeName);
    var viewModel = "@model " + viewEnumerable;
}
@viewModel
@@*Generated from Custom Template.*@@
@@*Model namespace using directive should be added to _ViewImports.cshtml.*@@

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "Liste";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<div class="container">
    @:<h1>@@ViewData["Title"]</h1>
@:</div>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>Liste</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }
@:<div class="container">
@:@@{
    @:var action = ViewBag.PageOrder is null ? "Index" : "IndexPageOrder";
@:}
@:<form asp-action="@@action" id="form" autocomplete="off">
    @:<div class="row mb-3">
        @:<div class="col-5">
            @:<partial name="_Message" />
        @:</div>
    @:@@{
        @:if (ViewBag.PageOrder is not null)
        @:{
            @:<partial name="_PageOrder" model="ViewBag.PageOrder" />
        @:}
        @:else
        @:{
            @:<div class="col-6"></div>  
        @:}
    @:}
        @:<div class="col-1 text-end">
            @:<a asp-action="Create">Yeni</a>
        @:</div>
    @:</div>
    @:@@if (Model is not null && Model.Any())
    @:{
    @:<table class="table table-striped table-bordered">
        @:<thead>
            @:<tr>
            Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
            Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

            foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
            {
                if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                    && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                {
                    bool isDateTime = property.TypeName.Equals(typeof(DateTime).FullName) || property.TypeName.Equals(typeof(DateTime?).FullName);
                    if (isDateTime)
                    {
                <th>
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                </th>
                    }
                    else
                    {
                        bool isDecimal = property.TypeName.Equals(typeof(decimal).FullName) || property.TypeName.Equals(typeof(decimal?).FullName)
                            || property.TypeName.Equals(typeof(double).FullName) || property.TypeName.Equals(typeof(double?).FullName);
                        if (isDecimal)
                        {
                <th>
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                </th>
                        }
                        else
                        {
                            bool isBoolean = property.TypeName.Equals(typeof(bool).FullName) || property.TypeName.Equals(typeof(bool?).FullName);
                            if (isBoolean)
                            {
                                bool isPropertyNameIsDeleted = property.PropertyName.Equals("IsDeleted");
                                if (!isPropertyNameIsDeleted)
                                {
                <th>
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                </th>
                                }
                            }
                            else
                            {
                                if (!property.PropertyName.Equals("Guid"))
                                {
                                    if (!property.IsMultilineText)
                                    {
                <th>
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                </th>
                                    }
                                }
                            }
                        }
                    } 
                }
                else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                {
                <th>
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                </th>
                }
            }
                @:<th class="w-25"></th>
            @:</tr>
        @:</thead>
        @:<tbody>
	    @:@@foreach (var item in Model) {
	        @:<tr>
	        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
			{
				if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
					&& property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
				{
                    bool isDateTime = property.TypeName.Equals(typeof(DateTime).FullName) || property.TypeName.Equals(typeof(DateTime?).FullName);
                    if (isDateTime)
                    {
                <td>
					@@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
				</td>
                    }
                    else
                    {
                        bool isDecimal = property.TypeName.Equals(typeof(decimal).FullName) || property.TypeName.Equals(typeof(decimal?).FullName)
                            || property.TypeName.Equals(typeof(double).FullName) || property.TypeName.Equals(typeof(double?).FullName);
                        if (isDecimal)
                        {
                <td>
					@@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
				</td>
                        }
                        else
                        {
                            bool isBoolean = property.TypeName.Equals(typeof(bool).FullName) || property.TypeName.Equals(typeof(bool?).FullName);
                            if (isBoolean)
                            {
                                bool isPropertyNameIsDeleted = property.PropertyName.Equals("IsDeleted");
                                if (!isPropertyNameIsDeleted)
                                {
                <td>
					@@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
				</td>
                                }
                            }
                            else
                            {
                                if (!property.PropertyName.Equals("Guid"))
                                {
                                    if (!property.IsMultilineText)
                                    {
                <td>
					@@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
				</td>
                                    }
                                }
                            }
                        }
                    }
				}
				else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
				{
				<td>
					@@Html.DisplayFor(modelItem => item.@GetValueExpression(navigation))
				</td>
				}
			}
	        string pkName = GetPrimaryKeyName();
	        if (pkName != null)
	        {
		        @:<td class="text-end">
			        @:<a asp-action="Details" asp-route-id="@@item.@pkName">Detay</a>&nbsp;|&nbsp;
			        @:<a asp-action="Edit" asp-route-id="@@item.@pkName">Düzenle</a>&nbsp;|&nbsp;
			        @:<a asp-action="Delete" asp-route-id="@@item.@pkName">Sil</a>
		        @:</td>
	        }
	        else
	        {
		        <td class="text-end">
			        @@Html.ActionLink("Detay", "Details", new { /* id=item.PrimaryKey */ })&nbsp;|&nbsp;
			        @@Html.ActionLink("Düzenle", "Edit", new { /* id=item.PrimaryKey */ })&nbsp;|&nbsp;
			        @@Html.ActionLink("Sil", "Delete", new { /* id=item.PrimaryKey */ })
		        </td>
	        }
	        @:</tr>
	    @:}
        @:</tbody>
    @:</table>
    @:}
@:</form>
@:</div>
@:
@:@@section Scripts {
    @:@@if (ViewBag.PageOrder is not null)
    @:{
@:<partial name="_PageOrderScripts" />
    @:}
@:}
@:
    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}



@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName.Split('.')[typeName.Split('.').Length - 1] + "QueryModel>";
    }
}