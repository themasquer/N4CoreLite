@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@{
    var viewModel = "@model " + Model.ViewDataTypeName.Split('.')[Model.ViewDataTypeName.Split('.').Length - 1] + "CommandModel";
}
@viewModel
@@*Generated from Custom Template.*@@
@@*Model namespace using directive should be added to _ViewImports.cshtml.*@@

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "Düzenle";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<div class="container">
    @:<h1>@@ViewData["Title"]</h1>
@:</div>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>Düzenle</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<div class="container">
    @:<partial name="_Message" />
    @:@@if (Model is not null)
    @:{
    @:<h4>@Model.ViewDataTypeShortName</h4>
    @:<hr />
    @:<div class="row">
        @:<div class="col-12">
            @:<form asp-action="@Model.ViewName" autocomplete="off">
		        @:@@Html.AntiForgeryToken()
                @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
            foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
            {
                if (property.IsPrimaryKey)
                {
                @:<input type="hidden" asp-for="@property.PropertyName" />
                    continue;
                }

                if (property.Scaffold)
                {
                    if (property.IsReadOnly)
                    {
                        continue;
                    }

                    if (property.IsForeignKey)
                    {
                @:<div class="row mb-3">
                    @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
				    @:<div class="col-6">
					    @:<select asp-for="@property.PropertyName" class="form-select select2" asp-items="ViewBag.@property.PropertyName">
						    @:<option value="">-- Seçiniz --</option>
					    @:</select>
					    @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
				    @:</div>
                @:</div>
                        continue;
                    }
                    bool isCheckbox = (property.TypeName.Equals(typeof(bool).FullName) || property.TypeName.Equals(typeof(bool?).FullName)) && !property.PropertyName.Equals("IsDeleted");
                    if (isCheckbox)
                    {
                @:<div class="row mb-3">
				    @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
				    @:<div class="col-10" style="padding-top: 7px;">
					    @:<input class="form-check-input" asp-for="@property.PropertyName" />
                    @:</div>
                @:</div>
                    }
                    else if (property.IsEnum && !property.IsEnumFlags)
                    {
                @:<div class="row mb-3">
                    @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
	                @:<div class="col-10">
		                @:<select asp-for="@property.PropertyName" class="form-select select2">
			                @:<option value="1">Option 1</option>
			                @:<option value="2">Option 2</option>
		                @:</select>
	                @:</div>
                @:</div>
                    }
                    else if (property.IsMultilineText)
                    {
                @:<div class="row mb-3">
                    @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
				    @:<div class="col-10">
					    @:<textarea asp-for="@property.PropertyName" class="form-control" rows="3"></textarea>
					    @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
				    @:</div>
                @:</div>
                    }
                    else
                    {
                        bool isDateTime = (property.TypeName.Equals(typeof(DateTime).FullName) || property.TypeName.Equals(typeof(DateTime?).FullName)) && !property.PropertyName.Equals("CreateDate") && !property.PropertyName.Equals("UpdateDate");
                        if (isDateTime)
                        {
                @:<div class="row mb-3">
                    @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
				    @:<div class="col-10">
					    @:<input asp-for="@property.PropertyName" class="form-control datetimepicker" type="text" />
					    @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
				    @:</div>
                @:</div>
                        }
                        else
                        {
                            if (!property.PropertyName.Equals("Guid") && !property.PropertyName.Equals("CreatedBy") && !property.PropertyName.Equals("UpdatedBy") && !property.PropertyName.Equals("CreateDate") && !property.PropertyName.Equals("UpdateDate") && !property.PropertyName.Equals("IsDeleted"))
                            {
                @:<div class="row mb-3">
                    @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
				    @:<div class="col-10">
					    @:<input asp-for="@property.PropertyName" class="form-control" />
					    @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
				    @:</div>
                @:</div>
                            }
                        }
                    }
                }
                // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
                else if (property.IsForeignKey)
                {
                @:<input type="hidden" asp-for="@property.PropertyName" />
                    continue;
                }
            }
                @:@@*
                @:<div class="row mb-3">
                    @:<label asp-for="ManyToManyIds" class="col-2 col-form-label fw-bold"></label>
				    @:<div class="col-10">
					    @:<select multiple asp-for="ManyToManyIds" class="form-select select2" asp-items="ViewBag.ManyToManyIds"></select>
					    @:<span asp-validation-for="ManyToManyIds" class="text-danger"></span>
				    @:</div>
                @:</div>
                @:*@@
            }
                <div class="row mb-3">
				    <div class="offset-2 col-6">
					    <input type="submit" value="Kaydet" class="btn btn-primary" />
					    &nbsp;&nbsp;
                        <button type="reset" class="btn btn-outline-primary">Temizle</button>
					    &nbsp;&nbsp;
					    <a asp-action="Index">Listeye Dön</a>
				    </div>
                </div>
            </form>
        </div>
    </div>
    }
</div>

@{
@:@@section Scripts {
if (Model.ReferenceScriptLibraries)
{
    @:<partial name="_ValidationScriptsPartial" />
}
    @:<partial name="_Select2" />
    @:<partial name="_DateTimePicker" />
@:}
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}



@functions
{
    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}