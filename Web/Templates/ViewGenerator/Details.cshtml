@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@{
    var viewModel = "@model " + Model.ViewDataTypeName.Split('.')[Model.ViewDataTypeName.Split('.').Length - 1] + "QueryModel";
}
@viewModel
@@*Generated from Custom Template.*@@
@@*Model namespace using directive should be added to _ViewImports.cshtml.*@@

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "Detay";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<div class="container">
    @:<h1>@@ViewData["Title"]</h1>
@:</div>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>Detay</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<div class="container">
    @:<partial name="_Message" />
    @:@@if (Model is not null)
}
    {
    <h4>@Model.ViewDataTypeShortName</h4>
    <hr />
    @{
        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
                bool isDateTime = property.TypeName.Equals(typeof(DateTime).FullName) || property.TypeName.Equals(typeof(DateTime?).FullName);
                if (isDateTime)
                {
    @:<div class="row mb-3">
        <div class="col-2">
            <b>@@Html.DisplayNameFor(model => model.@GetValueExpression(property))</b>
        </div>
        <div class="col-10">
            @@Html.DisplayFor(model => model.@GetValueExpression(property))
        </div>
    @:</div>
                }
                else
                {
                    bool isDecimal = property.TypeName.Equals(typeof(decimal).FullName) || property.TypeName.Equals(typeof(decimal?).FullName)
                        || property.TypeName.Equals(typeof(double).FullName) || property.TypeName.Equals(typeof(double?).FullName);
                    if (isDecimal)
                    {
    @:<div class="row mb-3">
        <div class="col-2">
            <b>@@Html.DisplayNameFor(model => model.@GetValueExpression(property))</b>
        </div>
        <div class="col-10">
            @@Html.DisplayFor(model => model.@GetValueExpression(property))
        </div>
    @:</div>
                    }
                    else
                    {
                        bool isBoolean = property.TypeName.Equals(typeof(bool).FullName) || property.TypeName.Equals(typeof(bool?).FullName);
                        if (isBoolean)
                        {
                            bool isPropertyNameIsDeleted = property.PropertyName.Equals("IsDeleted");
                            if (!isPropertyNameIsDeleted)
                            {
    @:<div class="row mb-3">
        <div class="col-2">
            <b>@@Html.DisplayNameFor(model => model.@GetValueExpression(property))</b>
        </div>
        <div class="col-10">
            @@Html.DisplayFor(model => model.@GetValueExpression(property))
        </div>
    @:</div>
                            }
                        }
                        else
                        {
                            if (!property.PropertyName.Equals("Guid"))
                            {
    @:<div class="row mb-3">
        <div class="col-2">
            <b>@@Html.DisplayNameFor(model => model.@GetValueExpression(property))</b>
        </div>
        <div class="col-10">
            @@Html.DisplayFor(model => model.@GetValueExpression(property))
        </div>
    @:</div>
                            }
                        }
                    }
                }
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
    <div class="row mb-3">
        <div class="col-2">
            <b>@@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))</b>
        </div>
        <div class="col-10">
            @@Html.DisplayFor(model => model.@GetValueExpression(navigation))
        </div>
    </div>
            }
        }
    @:@@*
    <div class="row mb-3">
        <div class="col-2">
            <b>@@Html.DisplayNameFor(model => model.ManyToManyProperty)</b>
        </div>
        <div class="col-10">
            @@if (!string.IsNullOrWhiteSpace(Model.ManyToManyProperty))
            {
            <div style="overflow-y:auto;border-style:solid;border-width:1px;padding-left:7px;height:100px;">
                @@Html.Raw(Model.ManyToManyProperty)
            </div>
            }
        </div>
    </div>
    @:*@@
    }
    <hr />
@{
string pkName = GetPrimaryKeyName();
if (pkName != null)
{
    @:<a asp-action="Edit" asp-route-id="@@Model?.@pkName">Düzenle</a>@@:&nbsp;|&nbsp;
    @:<a asp-action="Index">Listeye Dön</a>
}
else
{
    @:@@Html.ActionLink("Düzenle", "Edit", new { /* id = Model.PrimaryKey */ })@@:&nbsp;|&nbsp;
    @:<a asp-action="Index">Listeye Dön</a>
}
}
    }
</div>
@{
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}



@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}