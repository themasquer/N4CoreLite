@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
    @:#nullable disable

}
}
using Microsoft.AspNetCore.Mvc;
using Business.Models;
using DataAccess.Entities;
using N4CoreLite.Services.Bases;

//Generated from Custom Template.
namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;

    var serviceAbstractType = "ServiceBase<" + Model.ModelTypeName + ", " + Model.ModelTypeName + "QueryModel, " + Model.ModelTypeName + "CommandModel>";
    var serviceAbstractName = Model.ModelVariable + "Service";
    var queryModelType = Model.ModelTypeName + "QueryModel";
    var commandModelType = Model.ModelTypeName + "CommandModel";
}
    [Route("api/[controller]")]
    [ApiController]
    public class @Model.ControllerName : ControllerBase
    {
        // TODO: Add service injections here
        private readonly @serviceAbstractType @("_" + serviceAbstractName);

        public @(Model.ControllerName + "(" + serviceAbstractType + " " + serviceAbstractName))
        {
            @("_" + serviceAbstractName) = @serviceAbstractName;
        }

        // GET: @routePrefix
        [HttpGet]
        public async Task<IActionResult> Get()
        {
            var response = await @("_" + serviceAbstractName).GetList();
            return Ok(response);
        }

        // GET: @routePrefix/5
        [HttpGet("{id}")]
        public async Task<IActionResult> Get(@primaryKeyShortTypeName id)
        {
            var response = await @("_" + serviceAbstractName).GetItem(id);
            return Ok(response);
        }

		// POST: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<IActionResult> Post(@commandModelType @(Model.ModelVariable + "Command"))
        {
            if (ModelState.IsValid)
            {
                var response = await @("_" + serviceAbstractName).Create(@(Model.ModelVariable + "Command"));

			    //return CreatedAtAction("Get", new { id = @(Model.ModelVariable).@primaryKeyName }, @(Model.ModelVariable + "Command"));
                return Ok(response);
            }
            return BadRequest(ModelState);
        }

        // PUT: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut]
        public async Task<IActionResult> Put(@commandModelType @(Model.ModelVariable + "Command"))
        {
            if (ModelState.IsValid)
            {
                 var response = await @("_" + serviceAbstractName).Update(@(Model.ModelVariable + "Command"));

                //return NoContent();
                return Ok(response);
            }
            return BadRequest(ModelState);
        }

        // DELETE: @routePrefix/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(@primaryKeyShortTypeName id)
        {
            var response = await @("_" + serviceAbstractName).Delete(id);

            //return NoContent();
            return Ok(response);
        }
	}
}
